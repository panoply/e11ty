[
  {
    "page": "Tutorial",
    "description": "",
    "tags": [
      "Tutorial",
      "Install SPX",
      "Project Structure",
      "Connect SPX",
      "Script Evaluation",
      "Creating Components",
      "Registering Component",
      "Counter Markup",
      "Tabs Component",
      "Register Tabs",
      "Tabs Markup"
    ],
    "url": "/page/b/",
    "content": [
      {
        "heading": "Tutorial",
        "text": "SPX operates under the assumption that developers possess an intermediate level of frontend knowledge. Before delving into this tutorial, it’s essential to familiarize yourself with a few <a href=\"/introduction/key-concepts\">key concepts</a> and gain a basic understanding of how SPX functions. We’ll be utilizing a sample project available on <a href=\"#\">GitHub</a>, covering the major aspects of SPX along the way.This tutorial will demonstrate SPX usage in TypeScript using the <a href=\"https://pnpm.io\">pnpm</a> package manager and <a href=\"https://tsup.egoist.dev\">tsup</a> bundler. However, if you’re not using TypeScript or prefer a different development stack, feel free to make necessary adjustments to suit your preferences.",
        "type": "paragraph",
        "url": "/page/b#tutorial"
      },
      {
        "heading": "Install SPX",
        "text": "To begin, let’s install SPX into your project. SPX is an ESM (ECMAScript Module) module, so it’s crucial to ensure that your <code>package.json</code> file is marked with the type <code>module</code>.",
        "type": "paragraph",
        "url": "/page/b#install-spx"
      },
      {
        "heading": "Project Structure",
        "text": "In this tutorial, we’ll create components and explore various capabilities of SPX. While there’s no strict structure imposed, for the sake of brevity and simplicity, we’ll assume that your project follows the following directory structure:",
        "type": "paragraph",
        "url": "/page/b#project-structure"
      },
      {
        "heading": "Connect SPX",
        "text": "To establish SPX as the communication point of your application, we’ll use it as our default export and initialize it using the <code>{js} spx()</code> method. This method requires no options initially and will use the defaults. Once SPX is connected, it will take over the rendering cycle of your web application. Add the following code to your <code>bundle.ts</code> file:",
        "type": "paragraph",
        "url": "/page/b#connect-spx"
      },
      {
        "heading": "Script Evaluation",
        "text": "In SPX, adherence to two crucial rules is paramount. Firstly, it’s imperative to include JavaScript files within the <code>{html} &lt;head&gt;</code> element of your application. Secondly, it’s vital to prevent evaluation on the script responsible for establishing a connection to SPX. This can be achieved by adding a <code>{html} &lt;script spx-eval=&quot;false&quot;&gt;</code> attribute to the tag containing SPX. This precautionary measure ensures that SPX isn’t re-initialized for each navigation. Failure to implement this attribute may lead to SPX re-initializing for all subsequent visits, compromising its intended functionality.",
        "type": "paragraph",
        "url": "/page/b#script-evaluation"
      },
      {
        "heading": "Creating Components",
        "text": "Let’s proceed with creating SPX components to integrate into our web application. For a comprehensive understanding, it’s advisable to review the <a href=\"/components/structure\">Components Structure</a> section of the documentation. In this tutorial, we’ll craft simple components and delve into the process of registering and utilizing them effectively.We’ll commence by developing a fundamental counter component, aiming to enable incrementing and decrementing a number utilizing Component <a href=\"/components/events\">Events</a>, Component <a href=\"/components/state\">State</a>, and Component <a href=\"/components/nodes\">Nodes</a>. Begin by generating a new file named <code>counter.ts</code> within the <code>components</code> directory of your project, and insert the following code:",
        "type": "paragraph",
        "url": "/page/b#creating-components"
      },
      {
        "heading": "Registering Component",
        "text": "Now that we have our component defined, the next step is to register it with SPX so that SPX recognizes its existence. Let’s open up the <code>bundle.ts</code> entry point file where we called <code>spx.connect()</code> and proceed to import and register the component.",
        "type": "paragraph",
        "url": "/page/b#registering-component"
      },
      {
        "heading": "Counter Markup",
        "text": "Now, it’s time to integrate our component into the DOM. SPX components follow a simple directive pattern, utilizing attribute references as the control mechanism between the component and the DOM. The static <code>connect</code> object defined on the <code>Counter</code> component class serves as our configuration model, and the data provided via <code>connect</code> will be used by SPX internally when establishing instances.",
        "type": "paragraph",
        "url": "/page/b#counter-markup"
      },
      {
        "heading": "Tabs Component",
        "text": "A simple counter component is an excellent starting point, but let’s create a slightly more advanced component to explore the capabilities of SPX further. We’ll design a Tabs component that allows us to incorporate tabs into our web application. While still relatively straightforward, this component will enable us to delve into additional features. Following the same approach as with our Counter component, let’s create a new file in the <code>components</code> directory named <code>tabs.ts</code> and add the following code:Our Tabs component introduces a bit more complexity compared to the Counter component, particularly highlighting the <code>oninit</code> method. SPX components support lifecycle hooks, triggered at various points during rendering and fetching cycles. Another significant aspect of the Tabs component is the <code>event</code> argument passed to the <code>toggle</code> method. Here, we’re leveraging the SPX event <code>attrs</code> feature, enabling parameter values to be passed in via directives in the DOM.",
        "type": "paragraph",
        "url": "/page/b#tabs-component"
      },
      {
        "heading": "Register Tabs",
        "text": "Just as we did with our <a href=\"#6-registering-component\">Counter Component</a>, we need to make SPX aware that the Tabs component exists. Open up the <code>bundle.ts</code> entry point file where we called <code>spx()</code> and let’s register the component.",
        "type": "paragraph",
        "url": "/page/b#register-tabs"
      },
      {
        "heading": "Tabs Markup",
        "text": "In our Tabs component markup, you’ll notice a couple of additional directives within the <code>&lt;section&gt;</code> and <code>&lt;button&gt;</code> elements. These XML-like attributes are known as <a href=\"/components/state\">State Directives</a>. State Directives facilitate the transfer of data from the DOM to our components. They adhere to the <code>spx-&lt;component&gt;:&lt;key&gt;</code> structure and can only be annotated on component and event node types. These directives are responsible for passing data from the DOM to our component, specifically when they are present on component and event node types.State Directives serve as a means to define component state directly from the DOM, facilitating its usage within our component. These directives establish two-way bindings, seamlessly connecting components and markup to one another. Consequently, any modifications to the state will be automatically reflected in the DOM, ensuring consistent synchronization between the two.",
        "type": "paragraph",
        "url": "/page/b#tabs-markup"
      }
    ]
  },
  {
    "page": "Getting Help",
    "description": "some random string",
    "tags": [
      "Getting Help",
      "Shopify Developers",
      "Odestry Discord",
      "Github Repository",
      "X / Formally Twitter"
    ],
    "url": "/page/a/",
    "content": [
      {
        "heading": "Getting Help",
        "text": "SPX currently doesn’t have a centralized hub where developers and users can gather. Given its recent introduction, setting up a dedicated Discord or chat platform isn’t deemed essential at this time, though this could change in the future. However, if you’re seeking guidance or wish to connect with others utilizing SPX, you can engage with diverse developers across various communities and online forums.",
        "type": "paragraph",
        "url": "/page/a#getting-help"
      },
      {
        "heading": "Shopify Developers",
        "text": "The author and main contributors of SPX are active members of the <a href=\"https://discord.gg/shopify-developers-597504637167468564\">Shopify Developers Discord</a>, which, despite the name, is not affiliated with Shopify but is instead a community of developers working on various projects, with extensive experience with SPX. They can often be found there on a daily basis. You can reach us in the Projects ~ SPX channel.<a href=\"https://discord.gg/shopify-developers-597504637167468564\">Join the Discord</a>",
        "type": "paragraph",
        "url": "/page/a#shopify-developers"
      },
      {
        "heading": "Odestry Community",
        "text": "Contributors and users of SPX are also available on the <a href=\"https://discord.gg/blanklob-community-983602196493004820\">Odestry Discord</a>, where you can reach out via the Projects ~ Sissel Channel. While the Discord primarily focuses on Shopify theme development, similar to the Shopify Developers Discord, you’ll find a variety of discussions around web technologies.<a href=\"https://discord.gg/blanklob-community-983602196493004820\">Join the Discord</a>",
        "type": "paragraph",
        "url": "/page/a#odestry-community"
      },
      {
        "heading": "Github Repository",
        "text": "If you’ve encountered a bug or prefer to utilize GitHub, you can submit an <a href=\"https://github.com/panoply/spx/issues/new\">issue</a>, and it will be addressed promptly. Additionally, there are GitHub <a href=\"https://github.com/panoply/spx/discussions\">discussions</a> available for basic Q&amp;A.<a href=\"https://github.com/panoply/spx/issues/new\">Submit Issue</a>",
        "type": "paragraph",
        "url": "/page/a#github-repository"
      },
      {
        "heading": "X / Formerly Twitter",
        "text": "You’re also welcome to reach out to me directly on <a href=\"https://x.com/niksavvidis\">X</a> (formerly twitter), where I’m quite active and frequently share content related to web technologies and SPX.<a href=\"https://x.com/niksavvidis\">@niksavvidis</a>",
        "type": "paragraph",
        "url": "/page/a#x--formerly-twitter"
      }
    ]
  }
]